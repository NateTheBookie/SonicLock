
Screwdriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000013e  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800066  00800066  000001d8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000053  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000f0  00000000  00000000  0000024b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000087  00000000  00000000  0000033b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000102  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000bb  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ee e3       	ldi	r30, 0x3E	; 62
  24:	f1 e0       	ldi	r31, 0x01	; 1
  26:	02 c0       	rjmp	.+4      	; 0x2c <.do_copy_data_start>

00000028 <.do_copy_data_loop>:
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0

0000002c <.do_copy_data_start>:
  2c:	a6 36       	cpi	r26, 0x66	; 102
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <.do_copy_data_loop>

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a6 e6       	ldi	r26, 0x66	; 102
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a9 36       	cpi	r26, 0x69	; 105
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	1b d0       	rcall	.+54     	; 0x7a <main>
  44:	7a c0       	rjmp	.+244    	; 0x13a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_6>:
// current transmitted bit index 
unsigned char index;
volatile unsigned char nextbit;

//timer 0 match interrupt
ISR(TIM0_COMPA_vect){
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
	//update transmit bit in constant time
	LED_OUT_PORT = (LED_OUT_PORT & ~LED_OUT_MASK) | nextbit;
  56:	88 b3       	in	r24, 0x18	; 24
  58:	90 91 66 00 	lds	r25, 0x0066
  5c:	8f 7e       	andi	r24, 0xEF	; 239
  5e:	89 2b       	or	r24, r25
  60:	88 bb       	out	0x18, r24	; 24

	//set the flag to take care of the logic
	flags |= TRANSMIT;
  62:	80 91 68 00 	lds	r24, 0x0068
  66:	81 60       	ori	r24, 0x01	; 1
  68:	80 93 68 00 	sts	0x0068, r24
}
  6c:	9f 91       	pop	r25
  6e:	8f 91       	pop	r24
  70:	0f 90       	pop	r0
  72:	0f be       	out	0x3f, r0	; 63
  74:	0f 90       	pop	r0
  76:	1f 90       	pop	r1
  78:	18 95       	reti

0000007a <main>:

int main(){
	/* INIT CODE */
	cli(); //disable interrupts
  7a:	f8 94       	cli

	flags = 0x00; //clear custom interrupt flag
  7c:	10 92 68 00 	sts	0x0068, r1
	/*
	*Timer 0 init
	* This timer triggers the Output LED to move on to the next bit
	* Luckily this configuration is the same for all supported devices
	*/
	TCCR0A = _BV(WGM01); 	//Timer 0 set to CTC mode
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	8f bd       	out	0x2f, r24	; 47
  	TCCR0B = _BV(CS01) | _BV(CS00); //Timer on, 64 prescaler
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	83 bf       	out	0x33, r24	; 51
	//TCCR0B = _BV(CS02) | _BV(CS00); //Timer on, 1024 prescaler FOR TESTING
	OCR0A = TRANSMIT_TIME;			//Match 10ms cycle
  88:	86 e9       	ldi	r24, 0x96	; 150
  8a:	86 bf       	out	0x36, r24	; 54
	TIMSK = _BV(OCIE0A); 			//Enable Match A interrupt
  8c:	84 e0       	ldi	r24, 0x04	; 4
  8e:	89 bf       	out	0x39, r24	; 57

	
	/* bit transmission setup */
	LED_OUT_DIR = LED_OUT_MASK;		      	// enable output on port B, pin 4
  90:	80 e1       	ldi	r24, 0x10	; 16
  92:	87 bb       	out	0x17, r24	; 23
	index = 0;						//start transmission at address 0
  94:	10 92 67 00 	sts	0x0067, r1
	nextbit = 0x00;					//clear the next bit variable
  98:	10 92 66 00 	sts	0x0066, r1
  
  	sei(); //enable interrupts
  9c:	78 94       	sei
  9e:	20 e0       	ldi	r18, 0x00	; 0
			//increment index
			index = (index + 1) % 48;
			nextbit = 0x00;

			if((code[index / 8] << (index % 8)) & 0x80)
				nextbit = LED_OUT_MASK;
  a0:	30 e1       	ldi	r19, 0x10	; 16
	/*MAIN LOOP */
	while(1){
		//let ints do their thing...

		//handle the transmit timer interrupt
		if (flags & TRANSMIT) {
  a2:	80 91 68 00 	lds	r24, 0x0068
  a6:	80 ff       	sbrs	r24, 0
  a8:	fc cf       	rjmp	.-8      	; 0xa2 <__stack+0x3>
			
			//increment index
			index = (index + 1) % 48;
  aa:	82 2f       	mov	r24, r18
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	60 e3       	ldi	r22, 0x30	; 48
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	1b d0       	rcall	.+54     	; 0xec <__divmodhi4>
  b6:	28 2f       	mov	r18, r24
			nextbit = 0x00;
  b8:	10 92 66 00 	sts	0x0066, r1

			if((code[index / 8] << (index % 8)) & 0x80)
  bc:	e8 2f       	mov	r30, r24
  be:	e6 95       	lsr	r30
  c0:	e6 95       	lsr	r30
  c2:	e6 95       	lsr	r30
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	e0 5a       	subi	r30, 0xA0	; 160
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	80 81       	ld	r24, Z
  cc:	92 2f       	mov	r25, r18
  ce:	97 70       	andi	r25, 0x07	; 7
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <__stack+0x35>
  d2:	88 0f       	add	r24, r24
  d4:	9a 95       	dec	r25
  d6:	ea f7       	brpl	.-6      	; 0xd2 <__stack+0x33>
  d8:	87 ff       	sbrs	r24, 7
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__stack+0x41>
				nextbit = LED_OUT_MASK;
  dc:	30 93 66 00 	sts	0x0066, r19

			//clear the interrupt flag...
			flags &= ~TRANSMIT;
  e0:	80 91 68 00 	lds	r24, 0x0068
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	80 93 68 00 	sts	0x0068, r24
  ea:	db cf       	rjmp	.-74     	; 0xa2 <__stack+0x3>

000000ec <__divmodhi4>:
  ec:	97 fb       	bst	r25, 7
  ee:	09 2e       	mov	r0, r25
  f0:	07 26       	eor	r0, r23
  f2:	0a d0       	rcall	.+20     	; 0x108 <__divmodhi4_neg1>
  f4:	77 fd       	sbrc	r23, 7
  f6:	04 d0       	rcall	.+8      	; 0x100 <__divmodhi4_neg2>
  f8:	0c d0       	rcall	.+24     	; 0x112 <__udivmodhi4>
  fa:	06 d0       	rcall	.+12     	; 0x108 <__divmodhi4_neg1>
  fc:	00 20       	and	r0, r0
  fe:	1a f4       	brpl	.+6      	; 0x106 <__divmodhi4_exit>

00000100 <__divmodhi4_neg2>:
 100:	70 95       	com	r23
 102:	61 95       	neg	r22
 104:	7f 4f       	sbci	r23, 0xFF	; 255

00000106 <__divmodhi4_exit>:
 106:	08 95       	ret

00000108 <__divmodhi4_neg1>:
 108:	f6 f7       	brtc	.-4      	; 0x106 <__divmodhi4_exit>
 10a:	90 95       	com	r25
 10c:	81 95       	neg	r24
 10e:	9f 4f       	sbci	r25, 0xFF	; 255
 110:	08 95       	ret

00000112 <__udivmodhi4>:
 112:	aa 1b       	sub	r26, r26
 114:	bb 1b       	sub	r27, r27
 116:	51 e1       	ldi	r21, 0x11	; 17
 118:	07 c0       	rjmp	.+14     	; 0x128 <__udivmodhi4_ep>

0000011a <__udivmodhi4_loop>:
 11a:	aa 1f       	adc	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	a6 17       	cp	r26, r22
 120:	b7 07       	cpc	r27, r23
 122:	10 f0       	brcs	.+4      	; 0x128 <__udivmodhi4_ep>
 124:	a6 1b       	sub	r26, r22
 126:	b7 0b       	sbc	r27, r23

00000128 <__udivmodhi4_ep>:
 128:	88 1f       	adc	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	5a 95       	dec	r21
 12e:	a9 f7       	brne	.-22     	; 0x11a <__udivmodhi4_loop>
 130:	80 95       	com	r24
 132:	90 95       	com	r25
 134:	bc 01       	movw	r22, r24
 136:	cd 01       	movw	r24, r26
 138:	08 95       	ret

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
